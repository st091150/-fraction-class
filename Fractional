// Дробные числа.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include <cassert>

int GCD(int x, int y) {
    if ( x != 0. && y != 0.) {
        if (x > y) {
          return GCD(x % y, y);
        }
        else {
          return  GCD(x, y % x);
        }
    }
    return x + y;
}

class Fractional {
private:
    int x;
    int y;
public:
        Fractional(int numerator = 0, int denomitar = 1) {
           assert(!(denomitar == 0));
            int sup = GCD(numerator, denomitar);
            x = numerator / sup;
            y = denomitar / sup;
        }
    Fractional(const Fractional& X) : x(X.getNumerator()), y(X.getDenominator()) {}
    ~Fractional(){}
    
    int getNumerator()const { return x; }
    int getDenominator() const { return y; }

    Fractional operator+(const Fractional &X)const {
        return Fractional(x*X.getDenominator()+X.getNumerator()*y,y*X.getDenominator());
    }
    Fractional operator-(const Fractional &X)const {
        return Fractional(x * X.getDenominator() - X.getNumerator() * y, y * X.getDenominator());
    }
    Fractional operator/(const Fractional &X)const {
        return Fractional(x * X.getDenominator(), y * X.getNumerator());
    }
    Fractional operator*(const Fractional &X)const {
        return Fractional(x * X.getNumerator(), y * X.getDenominator());
    }
    Fractional operator=(const Fractional X) {
        x = X.getNumerator();
        y = X.getDenominator();
    }
};

std::ostream& operator<<(std::ostream& out, const Fractional& X) {
    if (X.getDenominator() == 1) {
        out << X.getNumerator() << std::endl;
    }else{
        out << X.getNumerator() << '/' << X.getDenominator() << std::endl;
    }
    return out;
}

int main()
{
    Fractional A(3,5);
    Fractional B(32, 5);
    Fractional C = B + A;
    std::cout << A << std::endl << C;
}
 
