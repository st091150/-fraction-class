// Дробные числа.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include <cassert>

int GCD( int x,int y) {
    x < 0 ? x = -x : x = x;
    y < 0 ? y = -y : y = y;
    if (x != 0 && y != 0) {
        if (x > y) {
            return GCD(x % y, y);
        }
        else {
            return  GCD(x, y % x);
        }
    }
    return x + y;
}

class Fractional {
private:
    int x;
    int y;
public:
    Fractional(int numerator = 0, int denominator = 1) {
        assert(!(denominator == 0));
        int sup = GCD(numerator, denominator);
        if (numerator < 0 && denominator < 0) {
        x = -(numerator / sup);
        y = -(denominator / sup);
        }
        else {
            x = (numerator / sup);
            y = (denominator / sup);
        }
     }
    Fractional(const Fractional& X) : x(X.getNumerator()), y(X.getDenominator()) {}
    ~Fractional(){}
    
    int getNumerator()const { return x; }
    int getDenominator() const { return y; }

    Fractional operator+(const Fractional &X)const {
        return Fractional(x*X.getDenominator()+X.getNumerator()*y,y*X.getDenominator());
    }
    Fractional operator-(const Fractional &X)const {
        return Fractional(x * X.getDenominator() - X.getNumerator() * y, y * X.getDenominator());
    }
    Fractional operator/(const Fractional &X)const {
        return Fractional(x * X.getDenominator(), y * X.getNumerator());
    }
    Fractional operator*(const Fractional &X)const {
        return Fractional(x * X.getNumerator(), y * X.getDenominator());
    }
    Fractional operator=(const Fractional X) {
        x = X.getNumerator();
        y = X.getDenominator();
    }
};

std::ostream& operator<<(std::ostream& out, const Fractional& X) {
    if (X.getDenominator() == 1) {
        out << X.getNumerator() << std::endl;
    }
    else if (X.getDenominator() == -1) {
        out << -X.getNumerator() << std::endl;
    }else {
        out << X.getNumerator() << '/' << X.getDenominator() << std::endl;
    }
    return out;
}

int main()
{
    Fractional A(1,2);
    Fractional B = {1,2};
    Fractional C = A + (9,9) - A + (A / B - A) + B;
    std::cout << A << '\n' << B << '\n' << C;
}
 
